#!/bin/bash -ex

# requires jsonq to be on the PATH
# https://github.com/edmund-huber/jsonq

# number of minutes to poll the slaves for busyness. if some of the slaves
# are still busy after that time, the script quits.
pollTime=60

# sleep time in minutes
sleepTime=5

# slaves to check for busyness
slaves="lamppc49-a lamppc49-b lamppc49-c"

# scala versions to build
scalaVersions="2.10.1-SNAPSHOT 2.11.0-SNAPSHOT"

# scalameter branch to pick
branch="jenkins"

# java version currently used
javaVersion="1.7.0_09-b05"

javaDir="/home/jenkins/apps/java-scalameter"
export PATH=$javaDir/bin:$PATH

if ! java -version 2>&1 | grep "$javaVersion"; then
  ver=`java -version 2>&1`
  echo "wrong java version. expected $javaVersion, found $ver"
  exit 1
fi


slaveBusy() {
  infoUrl="https://scala-webapps.epfl.ch/jenkins/computer/$1/api/json"
  res=`curl -s $infoUrl | jsonq .idle | tr -d ' '`
  if [[ $res == "true" ]]; then
    return 1
  else
    # return 0 when $res is "false", but also when it has some other value.
    # i.e. assume busy when there's an error retrieving the busyness.
    return 0
  fi
}

slaveOnline() {
  infoUrl="https://scala-webapps.epfl.ch/jenkins/computer/$1/api/json"
  res=`curl -s $infoUrl | jsonq .offline | tr -d ' '`
  if [[ $res == "true" ]]; then
    return 1
  else
    # return 0 when $res is "false", but also when it has some other value.
    # i.e. assume online when there's an error retrieving the offline state.
    return 0
  fi
}

busy=true
while $busy && [[ $pollTime -gt 0 ]]; do
  busy=false
  for s in $slaves; do
    if slaveBusy $s; then
      busy=true
    fi
  done

  if $busy; then
    pollTime=$(($pollTime - $sleepTime))
    sleep $(($sleepTime * 60))
  fi
done


if $busy; then
  echo "slaves still busy, exiting"
  exit 1
else
  for s in $slaves; do
    if slaveOnline $s; then
      echo "slave $s is not offline, aborting"
      exit 1
    fi
  done


  mkdir -p ~/scalameter
  cd ~/scalameter

  mkdir -p data

  rm -rf scalameter
  git clone git://github.com/axel22/scalameter.git
  cd scalameter
  git checkout -b $branch origin/$branch

  for ver in $scalaVersions; do
    dataDir=`readlink -f ../data/$ver`
    mkdir -p $dataDir
    git clean -dfx
    sbt -no-colors "set scalaVersion := \"$ver\"" "set resolvers += Resolver.sonatypeRepo(\"snapshots\")" "runsuite -verbose -CresultDir $dataDir -b org.scalameter.collections.CollectionBenchmarks"
  done


  cd ../data
  rsync . scalatest@chara.epfl.ch:/home/wwwlamp/htdocs/scalameter


  for s in $slaves; do
    if slaveOnline $s; then
      echo "slave $s went online while running the tests, aborting"
      exit 1
    fi
  done
  exit 0
fi
